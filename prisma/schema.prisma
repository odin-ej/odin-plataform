generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

// --- ENUMS ---

enum AccountType {
  ALFA
  BETA
  DELTA
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum RoomStatus {
  FREE
  BUSY
  RESTRICTED
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELED
}

enum ReportStatus {
  DRAFT
  SUBMITTED
  REJECTED
  APPROVED
}

enum AreaRoles {
  CONSULTORIA
  TATICO
  PRESIDENCIA
  MARKETING
  COMERCIAL
  ADMINISTRATIVO_FINANCEIRO
  OPERACOES
  PESSOAS
  PROJETOS
  MERCADO
  DIRETORIA
  CONSELHO
  OUTRO
}

enum TagAreas {
  PRESIDENCIA
  OPERACOES
  PESSOAS
  PROJETOS
  MERCADO
  GERAL
}

enum LinkAreas {
  GERAL
  CONSULTORIA
  DIRETORIA
  TATICO
  PRESIDENCIA
  OPERACOES
  PESSOAS
  PROJETOS
  MERCADO
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LinkPosterArea {
  MEMBROS
  EXMEMBROS
  GERAL
  HOME
  YGGDRASIL
  CONSULTORIA
  DIRETORIA
  TATICO
}

enum JRPointsSolicitationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum JRPointsReportStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  POINTS_AWARDED
  REQUEST_APPROVED
  REQUEST_REJECTED
  NEW_MENTION
  GENERAL_ALERT
}

// --- MODELS ---

model RegistrationRequest {
  id              String        @id @default(uuid())
  status          RequestStatus @default(PENDING)
  name            String
  email           String        @unique
  emailEJ         String        @unique
  password        String
  imageUrl        String
  birthDate       DateTime      @map("birth_date")
  phone           String        @unique
  semesterEntryEj String        @map("semester_entry_ej")
  semesterLeaveEj String?       @map("semester_leave_ej")
  course          String?
  instagram       String?
  linkedin        String?
  about           String?       @db.Text
  aboutEj         String?       @db.Text
  roleId          String?
  roles           Role[]        @relation("RegistrationRequestRoles")
  otherRole       String?
  isExMember      Boolean       @default(false) @map("ex_member")
  alumniDreamer   Boolean       @default(false) @map("alumni_dreamer")
  isWorking       Boolean?
  workplace       String?
  adminNotes      String?       @db.Text
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model User {
  id                String    @id
  name              String
  email             String    @unique
  emailEJ           String    @unique
  imageUrl          String
  password          String
  birthDate         DateTime  @map("birth_date")
  phone             String    @unique
  semesterEntryEj   String    @map("semester_entry_ej")
  semesterLeaveEj   String?   @map("semester_leave_ej")
  linkedin          String?
  instagram         String?
  course            String?
  about             String?   @db.Text
  aboutEj           String?   @map("about_ej") @db.Text
  isExMember        Boolean   @default(false) @map("ex_member")
  alumniDreamer     Boolean   @default(false) @map("alumni_dreamer")
  otherRole         String?
  currentRoleId     String?
  currentRole       Role?     @relation("UserCurrentRole", fields: [currentRoleId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  dailyMessageCount Int       @default(0)
  lastMessageDate   DateTime?
  isWorking         Boolean?
  workplace         String?

  conversations          Conversation[]
  roles                  Role[]                       @relation("UserRoles")
  points                 UserPoints?
  tasksResponsibleFor    Task[]                       @relation("TaskResponsibles")
  projectsResponsibleFor Project[]                    @relation("ProjectResponsibles")
  reportsSent            Report[]                     @relation("ReportReferent")
  reportsReceived        Report[]                     @relation("ReportRecipientUser")
  squadsLed              Squad[]                      @relation("SquadLeader")
  squadsAsMember         Squad[]                      @relation("SquadMembers")
  roomReservation        RoomReservation[]
  tasksAuthor            Task[]
  usefulLinks            UsefulLink[]
  assignedTags           Tag[]                        @relation("AssignedTags")
  madeConnectionRequests ReserveRequestToConections[] @relation("ConnectionRequestApplicant")
  notifications          Notification[]
  roleHistory            UserRoleHistory[]
  semesterScores         UserSemesterScore[]
  jrPointsSolicitations  JRPointsSolicitation[]
  jrPointsReports        JRPointsReport[]
  posts                  Post[]
  comments               Comment[]
  likedPosts             Post[]                       @relation("PostLikes")
  likedComments          Comment[]                    @relation("CommentLikes")
  solicitationsAsMember  JRPointsSolicitation[]       @relation("SolicitationMembers")
}

model UserRoleHistory {
  id        String   @id @default(uuid())
  semester  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([roleId])
}

model UsefulLink {
  id        String    @id @default(uuid())
  title     String
  url       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isGlobal  Boolean   @default(false)
  area      LinkAreas @default(GERAL)
}

model Role {
  id                   String                       @id @default(uuid())
  name                 String                       @unique
  description          String
  area                 AreaRoles[]
  createdAt            DateTime                     @default(now())
  updatedAt            DateTime                     @updatedAt
  users                User[]                       @relation("UserRoles")
  reportsReceived      Report[]                     @relation("ReportRecipientRole")
  registrationRequests RegistrationRequest[]        @relation("RegistrationRequestRoles")
  currentRoleUsers     User[]                       @relation("UserCurrentRole")
  connectionRequests   ReserveRequestToConections[] @relation("ConnectionRequestRole")
  userHistory          UserRoleHistory[]
}

model UserPoints {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  totalPoints Int      @default(0)
  tags        Tag[]
}

model UserSemesterScore {
  id          String   @id @default(uuid())
  semester    String
  totalPoints Int
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        Tag[]

  @@index([userId, semester])
    @@unique([userId, semester])
}

model JRPointsRanking {
  id       Int     @id @default(1)
  isHidden Boolean @default(false)
}

model EnterprisePoints {
  id          Int      @id @default(1)
  value       Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        Tag[]
}

// -----------------------------------------------------------------
// --- ESTRUTURA JR POINTS - NÃO QUEBRÁVEL E CORRIGIDA ---
// -----------------------------------------------------------------

model JRPointsVersion {
  id                 String    @id @default(uuid())
  versionName        String    @unique
  description        String?   @db.Text
  implementationDate DateTime
  endDate            DateTime?
  isActive           Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Uma versão consiste em um conjunto de "moldes de tags" disponíveis
  tagTemplates TagTemplate[]

  // Relação direta com ActionTypes para fins de organização, como solicitado
  actionTypes ActionType[] @relation("VersionActionTypes")
}

model ActionType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ActionType é uma categoria para vários "moldes de tags"
  tagTemplates TagTemplate[]
  tags         Tag[]

  // ActionType pode pertencer a múltiplas versões
  versions JRPointsVersion[] @relation("VersionActionTypes")
}

model TagTemplate {
  id                   String   @id @default(uuid())
  name                 String
  description          String   @db.Text
  baseValue            Int
  // Regras de escalonamento são definidas aqui, no "molde"
  isScalable           Boolean? @default(false)
  escalationValue      Float? // Ex: 5, -5. O valor a ser SOMADO a cada streak.
  escalationStreakDays Int? // Ex: 7. Nº máximo de dias entre atribuições para manter o streak.
  escalationCondition  String?  @db.Text // Descrição da regra

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relação com sua categoria (ActionType)
  actionTypeId String
  actionType   ActionType @relation(fields: [actionTypeId], references: [id], onDelete: Cascade)

  // Relação com a versão a que pertence
  jrPointsVersionId String?
  jrPointsVersion   JRPointsVersion? @relation(fields: [jrPointsVersionId], references: [id], onDelete: Cascade)

  // Relação com todas as instâncias de tags criadas a partir deste molde
  tagInstances Tag[]
  areas        TagAreas[] @default([GERAL])
}

model Tag {
  id            String     @id @default(uuid())
  value         Int
  description   String
  datePerformed DateTime   @map("date_performed")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  areas         TagAreas[] @default([GERAL])
  isFromAppeal  Boolean?   @default(false) // Adicionado para a lógica de "Recurso"

  // --- CAMPO DE COMPATIBILIDADE ---
  // Este campo é mantido para garantir que as tags existentes na sua base de dados continuem funcionando.
  // Para novas tags, ele deve ser preenchido com a informação do TagTemplate no momento da criação.
  actionTypeId String
  actionType   ActionType @relation(fields: [actionTypeId], references: [id], onDelete: Cascade)

  // --- NOVO SISTEMA DE MOLDES (Templates) ---
  // Esta relação é OPCIONAL (?) para não quebrar as tags existentes.
  // Novas tags, criadas a partir de um molde, terão este campo preenchido.
  templateId String?
  template   TagTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull) // SetNull para não apagar a tag se o molde for removido

  // --- RELAÇÕES EXISTENTES ---
  userPointsId String?
  userPoints   UserPoints? @relation(fields: [userPointsId], references: [id], onDelete: Cascade)

  assignerId String?
  assigner   User?   @relation("AssignedTags", fields: [assignerId], references: [id], onDelete: SetNull)

  enterprisePointsId Int?
  enterprisePoints   EnterprisePoints? @relation(fields: [enterprisePointsId], references: [id], onDelete: Cascade)

  solicitations       JRPointsSolicitation[] @relation("SolicitationTags")
  UserSemesterScore   UserSemesterScore?     @relation(fields: [userSemesterScoreId], references: [id])
  userSemesterScoreId String?
  JRPointsReport      JRPointsReport[]
}

model FileAttachment {
  id                     String                @id @default(uuid())
  url                    String
  fileName               String
  fileType               String
  createdAt              DateTime              @default(now())
  jrPointsSolicitationId String?
  jrPointsSolicitation   JRPointsSolicitation? @relation(fields: [jrPointsSolicitationId], references: [id], onDelete: Cascade)
  postId                 String?
  post                   Post?                 @relation(fields: [postId], references: [id], onDelete: Cascade)
  JRPointsReport         JRPointsReport?       @relation(fields: [jRPointsReportId], references: [id])
  jRPointsReportId       String?
}

model JRPointsSolicitation {
  id              String                     @id @default(uuid())
  description     String                     @db.Text
  datePerformed   String
  directorsNotes  String                    @db.Text
  status          JRPointsSolicitationStatus @default(PENDING)
  area            AreaRoles
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  userId          String
  user            User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  membersSelected User[]                     @relation("SolicitationMembers")
  tags            Tag[]                      @relation("SolicitationTags")
  attachments     FileAttachment[]
}

model JRPointsReport {
  id           String               @id @default(uuid())
  description  String               @db.Text
  attachments FileAttachment[]
  tag          Tag                  @relation(fields: [tagId], references: [id])
  status       JRPointsReportStatus @default(PENDING)
  area         AreaRoles
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  userId       String
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  tagId        String
  directorsNotes  String                    @db.Text
}

// -----------------------------------------------------------------
// --- DEMAIS MODELOS ---
// -----------------------------------------------------------------

model Task {
  id           String     @id @default(uuid())
  title        String
  status       TaskStatus
  description  String     @db.Text
  deadline     DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  authorId     String?
  author       User?      @relation(fields: [authorId], references: [id], onDelete: SetNull)
  responsibles User[]     @relation("TaskResponsibles")
  projectId    String?
  project      Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Project {
  id           String        @id @default(uuid())
  account      AccountType
  status       ProjectStatus
  description  String        @db.Text
  deadline     DateTime
  title        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  responsibles User[]        @relation("ProjectResponsibles")
  tasks        Task[]
}

model Report {
  id              String       @id @default(uuid())
  title           String
  status          ReportStatus
  content         String       @db.Text
  recipientNotes  String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  referentId      String?
  referent        User?        @relation("ReportReferent", fields: [referentId], references: [id], onDelete: SetNull)
  recipientUserId String?
  recipientUser   User?        @relation("ReportRecipientUser", fields: [recipientUserId], references: [id], onDelete: SetNull)
  recipientRoleId String?
  recipientRole   Role?        @relation("ReportRecipientRole", fields: [recipientRoleId], references: [id], onDelete: SetNull)
}

model EstrategyPlan {
  id                  Int                  @id @default(1)
  propose             String               @db.Text
  mission             String               @db.Text
  vision              String               @db.Text
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  values              Value[]
  estrategyObjectives EstrategyObjective[]
}

model EstrategyObjective {
  id              String         @id @default(uuid())
  objective       String
  description     String         @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  estrategyPlanId Int?
  estrategyPlan   EstrategyPlan? @relation(fields: [estrategyPlanId], references: [id])
  goals           Goal[]
}

model Goal {
  id                   String              @id @default(uuid())
  title                String
  description          String              @db.Text
  goal                 Decimal
  value                Decimal
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  estrategyObjectiveId String?
  estrategyObjective   EstrategyObjective? @relation(fields: [estrategyObjectiveId], references: [id])
}

model Value {
  id              String         @id @default(uuid())
  name            String
  description     String
  isMotherValue   Boolean        @default(false) @map("is_mother_value")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  estrategyPlanId Int?
  estrategyPlan   EstrategyPlan? @relation(fields: [estrategyPlanId], references: [id])
}

model Squad {
  id          String   @id @default(uuid())
  name        String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  leaderId    String
  leader      User     @relation("SquadLeader", fields: [leaderId], references: [id])
  members     User[]   @relation("SquadMembers")
}

model Room {
  id           String            @id @default(uuid())
  name         String            @unique
  reservations RoomReservation[]
}

model RoomReservation {
  id                    String     @id @default(uuid())
  date                  DateTime
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  hourEnter             DateTime
  hourLeave             DateTime
  status                RoomStatus
  roomId                String
  room                  Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  userId                String?
  user                  User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  googleCalendarEventId String?
}

model Conversation {
  id        String    @id @default(uuid())
  title     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id             String       @id @default(uuid())
  content        String       @db.Text
  role           String
  createdAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model KnowledgeChunk {
  id        String                      @id @default(uuid())
  content   String                      @db.Text
  embedding Unsupported("vector(768)")?
  createdAt DateTime                    @default(now())
}

model LinkPoster {
  id        String           @id @default(uuid())
  title     String
  imageUrl  String
  link      String
  areas     LinkPosterArea[]
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model ReserveRequestToConections {
  id          String        @id @default(uuid())
  title       String
  date        DateTime
  description String
  applicantId String
  applicant   User          @relation("ConnectionRequestApplicant", fields: [applicantId], references: [id])
  roleId      String
  role        Role          @relation("ConnectionRequestRole", fields: [roleId], references: [id])
  status      RequestStatus @default(PENDING)
}

model Notification {
  id           String            @id @default(uuid())
  notification String            @db.Text
  userId       String
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  isRead       Boolean?          @default(false)
  type         NotificationType?
  link         String?

  @@index([userId])
}

model Post {
  id          String           @id @default(uuid())
  title       String
  content     String           @db.Text
  isFixed     Boolean?         @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  authorId    String
  author      User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likedBy     User[]           @relation("PostLikes")
  comments    Comment[]
  layouts     PostsLayout[]    @relation("LayoutPosts")
  attachments FileAttachment[]

  @@index([authorId])
}

model Comment {
  id        String    @id @default(uuid())
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  likedBy   User[]    @relation("CommentLikes")
  parentId  String?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies   Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
}

model PostsLayout {
  id        String   @id @default(uuid())
  title     String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("LayoutPosts")
}
